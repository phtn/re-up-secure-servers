// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fast/ent/account"
	"fast/ent/group"
	"fast/ent/schema"
	"fast/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	accountMixin := schema.Account{}.Mixin()
	accountMixinFields0 := accountMixin[0].Fields()
	_ = accountMixinFields0
	accountMixinFields1 := accountMixin[1].Fields()
	_ = accountMixinFields1
	accountFields := schema.Account{}.Fields()
	_ = accountFields
	// accountDescName is the schema descriptor for name field.
	accountDescName := accountMixinFields0[0].Descriptor()
	// account.DefaultName holds the default value on creation for the name field.
	account.DefaultName = accountDescName.Default.(string)
	// account.NameValidator is a validator for the "name" field. It is called by the builders before save.
	account.NameValidator = accountDescName.Validators[0].(func(string) error)
	// accountDescNickname is the schema descriptor for nickname field.
	accountDescNickname := accountMixinFields0[1].Descriptor()
	// account.DefaultNickname holds the default value on creation for the nickname field.
	account.DefaultNickname = accountDescNickname.Default.(string)
	// account.NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	account.NicknameValidator = accountDescNickname.Validators[0].(func(string) error)
	// accountDescEmail is the schema descriptor for email field.
	accountDescEmail := accountMixinFields0[2].Descriptor()
	// account.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	account.EmailValidator = func() func(string) error {
		validators := accountDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// accountDescPhoneNumber is the schema descriptor for phone_number field.
	accountDescPhoneNumber := accountMixinFields0[3].Descriptor()
	// account.PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	account.PhoneNumberValidator = func() func(string) error {
		validators := accountDescPhoneNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone_number string) error {
			for _, fn := range fns {
				if err := fn(phone_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// accountDescPhotoURL is the schema descriptor for photo_url field.
	accountDescPhotoURL := accountMixinFields0[4].Descriptor()
	// account.PhotoURLValidator is a validator for the "photo_url" field. It is called by the builders before save.
	account.PhotoURLValidator = accountDescPhotoURL.Validators[0].(func(string) error)
	// accountDescUID is the schema descriptor for uid field.
	accountDescUID := accountMixinFields0[5].Descriptor()
	// account.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	account.UIDValidator = func() func(string) error {
		validators := accountDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// accountDescCreateTime is the schema descriptor for create_time field.
	accountDescCreateTime := accountMixinFields1[0].Descriptor()
	// account.DefaultCreateTime holds the default value on creation for the create_time field.
	account.DefaultCreateTime = accountDescCreateTime.Default.(func() time.Time)
	// accountDescUpdateTime is the schema descriptor for update_time field.
	accountDescUpdateTime := accountMixinFields1[1].Descriptor()
	// account.DefaultUpdateTime holds the default value on creation for the update_time field.
	account.DefaultUpdateTime = accountDescUpdateTime.Default.(func() time.Time)
	// accountDescAPIKey is the schema descriptor for api_key field.
	accountDescAPIKey := accountFields[1].Descriptor()
	// account.APIKeyValidator is a validator for the "api_key" field. It is called by the builders before save.
	account.APIKeyValidator = func() func(string) error {
		validators := accountDescAPIKey.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(api_key string) error {
			for _, fn := range fns {
				if err := fn(api_key); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// accountDescIsActive is the schema descriptor for is_active field.
	accountDescIsActive := accountFields[2].Descriptor()
	// account.DefaultIsActive holds the default value on creation for the is_active field.
	account.DefaultIsActive = accountDescIsActive.Default.(bool)
	// accountDescID is the schema descriptor for id field.
	accountDescID := accountFields[0].Descriptor()
	// account.DefaultID holds the default value on creation for the id field.
	account.DefaultID = accountDescID.Default.(func() uuid.UUID)
	groupMixin := schema.Group{}.Mixin()
	groupMixinFields0 := groupMixin[0].Fields()
	_ = groupMixinFields0
	groupMixinFields1 := groupMixin[1].Fields()
	_ = groupMixinFields1
	groupFields := schema.Group{}.Fields()
	_ = groupFields
	// groupDescName is the schema descriptor for name field.
	groupDescName := groupMixinFields0[0].Descriptor()
	// group.DefaultName holds the default value on creation for the name field.
	group.DefaultName = groupDescName.Default.(string)
	// group.NameValidator is a validator for the "name" field. It is called by the builders before save.
	group.NameValidator = groupDescName.Validators[0].(func(string) error)
	// groupDescNickname is the schema descriptor for nickname field.
	groupDescNickname := groupMixinFields0[1].Descriptor()
	// group.DefaultNickname holds the default value on creation for the nickname field.
	group.DefaultNickname = groupDescNickname.Default.(string)
	// group.NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	group.NicknameValidator = groupDescNickname.Validators[0].(func(string) error)
	// groupDescEmail is the schema descriptor for email field.
	groupDescEmail := groupMixinFields0[2].Descriptor()
	// group.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	group.EmailValidator = func() func(string) error {
		validators := groupDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// groupDescPhoneNumber is the schema descriptor for phone_number field.
	groupDescPhoneNumber := groupMixinFields0[3].Descriptor()
	// group.PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	group.PhoneNumberValidator = func() func(string) error {
		validators := groupDescPhoneNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone_number string) error {
			for _, fn := range fns {
				if err := fn(phone_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// groupDescPhotoURL is the schema descriptor for photo_url field.
	groupDescPhotoURL := groupMixinFields0[4].Descriptor()
	// group.PhotoURLValidator is a validator for the "photo_url" field. It is called by the builders before save.
	group.PhotoURLValidator = groupDescPhotoURL.Validators[0].(func(string) error)
	// groupDescUID is the schema descriptor for uid field.
	groupDescUID := groupMixinFields0[5].Descriptor()
	// group.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	group.UIDValidator = func() func(string) error {
		validators := groupDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// groupDescCreateTime is the schema descriptor for create_time field.
	groupDescCreateTime := groupMixinFields1[0].Descriptor()
	// group.DefaultCreateTime holds the default value on creation for the create_time field.
	group.DefaultCreateTime = groupDescCreateTime.Default.(func() time.Time)
	// groupDescUpdateTime is the schema descriptor for update_time field.
	groupDescUpdateTime := groupMixinFields1[1].Descriptor()
	// group.DefaultUpdateTime holds the default value on creation for the update_time field.
	group.DefaultUpdateTime = groupDescUpdateTime.Default.(func() time.Time)
	// groupDescGroupCode is the schema descriptor for group_code field.
	groupDescGroupCode := groupFields[1].Descriptor()
	// group.GroupCodeValidator is a validator for the "group_code" field. It is called by the builders before save.
	group.GroupCodeValidator = func() func(string) error {
		validators := groupDescGroupCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(group_code string) error {
			for _, fn := range fns {
				if err := fn(group_code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// groupDescAddress is the schema descriptor for address field.
	groupDescAddress := groupFields[3].Descriptor()
	// group.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	group.AddressValidator = func() func(string) error {
		validators := groupDescAddress.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(address string) error {
			for _, fn := range fns {
				if err := fn(address); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// groupDescIsActive is the schema descriptor for is_active field.
	groupDescIsActive := groupFields[4].Descriptor()
	// group.DefaultIsActive holds the default value on creation for the is_active field.
	group.DefaultIsActive = groupDescIsActive.Default.(bool)
	// groupDescID is the schema descriptor for id field.
	groupDescID := groupFields[0].Descriptor()
	// group.DefaultID holds the default value on creation for the id field.
	group.DefaultID = groupDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userMixinFields0[0].Descriptor()
	// user.DefaultName holds the default value on creation for the name field.
	user.DefaultName = userDescName.Default.(string)
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescNickname is the schema descriptor for nickname field.
	userDescNickname := userMixinFields0[1].Descriptor()
	// user.DefaultNickname holds the default value on creation for the nickname field.
	user.DefaultNickname = userDescNickname.Default.(string)
	// user.NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	user.NicknameValidator = userDescNickname.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userMixinFields0[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPhoneNumber is the schema descriptor for phone_number field.
	userDescPhoneNumber := userMixinFields0[3].Descriptor()
	// user.PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	user.PhoneNumberValidator = func() func(string) error {
		validators := userDescPhoneNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone_number string) error {
			for _, fn := range fns {
				if err := fn(phone_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPhotoURL is the schema descriptor for photo_url field.
	userDescPhotoURL := userMixinFields0[4].Descriptor()
	// user.PhotoURLValidator is a validator for the "photo_url" field. It is called by the builders before save.
	user.PhotoURLValidator = userDescPhotoURL.Validators[0].(func(string) error)
	// userDescUID is the schema descriptor for uid field.
	userDescUID := userMixinFields0[5].Descriptor()
	// user.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	user.UIDValidator = func() func(string) error {
		validators := userDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields1[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields1[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// userDescIsActive is the schema descriptor for is_active field.
	userDescIsActive := userFields[2].Descriptor()
	// user.DefaultIsActive holds the default value on creation for the is_active field.
	user.DefaultIsActive = userDescIsActive.Default.(bool)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
