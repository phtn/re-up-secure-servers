// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fast/ent/account"
	"fast/ent/group"
	"fast/ent/predicate"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// Where appends a list predicates to the AccountUpdate builder.
func (au *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *AccountUpdate) SetName(s string) *AccountUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AccountUpdate) SetNillableName(s *string) *AccountUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// ClearName clears the value of the "name" field.
func (au *AccountUpdate) ClearName() *AccountUpdate {
	au.mutation.ClearName()
	return au
}

// SetNickname sets the "nickname" field.
func (au *AccountUpdate) SetNickname(s string) *AccountUpdate {
	au.mutation.SetNickname(s)
	return au
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (au *AccountUpdate) SetNillableNickname(s *string) *AccountUpdate {
	if s != nil {
		au.SetNickname(*s)
	}
	return au
}

// ClearNickname clears the value of the "nickname" field.
func (au *AccountUpdate) ClearNickname() *AccountUpdate {
	au.mutation.ClearNickname()
	return au
}

// SetEmail sets the "email" field.
func (au *AccountUpdate) SetEmail(s string) *AccountUpdate {
	au.mutation.SetEmail(s)
	return au
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (au *AccountUpdate) SetNillableEmail(s *string) *AccountUpdate {
	if s != nil {
		au.SetEmail(*s)
	}
	return au
}

// ClearEmail clears the value of the "email" field.
func (au *AccountUpdate) ClearEmail() *AccountUpdate {
	au.mutation.ClearEmail()
	return au
}

// SetPhoneNumber sets the "phone_number" field.
func (au *AccountUpdate) SetPhoneNumber(s string) *AccountUpdate {
	au.mutation.SetPhoneNumber(s)
	return au
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (au *AccountUpdate) SetNillablePhoneNumber(s *string) *AccountUpdate {
	if s != nil {
		au.SetPhoneNumber(*s)
	}
	return au
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (au *AccountUpdate) ClearPhoneNumber() *AccountUpdate {
	au.mutation.ClearPhoneNumber()
	return au
}

// SetPhotoURL sets the "photo_url" field.
func (au *AccountUpdate) SetPhotoURL(s string) *AccountUpdate {
	au.mutation.SetPhotoURL(s)
	return au
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (au *AccountUpdate) SetNillablePhotoURL(s *string) *AccountUpdate {
	if s != nil {
		au.SetPhotoURL(*s)
	}
	return au
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (au *AccountUpdate) ClearPhotoURL() *AccountUpdate {
	au.mutation.ClearPhotoURL()
	return au
}

// SetUID sets the "uid" field.
func (au *AccountUpdate) SetUID(s string) *AccountUpdate {
	au.mutation.SetUID(s)
	return au
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (au *AccountUpdate) SetNillableUID(s *string) *AccountUpdate {
	if s != nil {
		au.SetUID(*s)
	}
	return au
}

// SetAddressID sets the "address_id" field.
func (au *AccountUpdate) SetAddressID(s string) *AccountUpdate {
	au.mutation.SetAddressID(s)
	return au
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (au *AccountUpdate) SetNillableAddressID(s *string) *AccountUpdate {
	if s != nil {
		au.SetAddressID(*s)
	}
	return au
}

// SetAPIKey sets the "api_key" field.
func (au *AccountUpdate) SetAPIKey(s string) *AccountUpdate {
	au.mutation.SetAPIKey(s)
	return au
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (au *AccountUpdate) SetNillableAPIKey(s *string) *AccountUpdate {
	if s != nil {
		au.SetAPIKey(*s)
	}
	return au
}

// SetIsActive sets the "is_active" field.
func (au *AccountUpdate) SetIsActive(b bool) *AccountUpdate {
	au.mutation.SetIsActive(b)
	return au
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (au *AccountUpdate) SetNillableIsActive(b *bool) *AccountUpdate {
	if b != nil {
		au.SetIsActive(*b)
	}
	return au
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (au *AccountUpdate) AddGroupIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.AddGroupIDs(ids...)
	return au
}

// AddGroups adds the "groups" edges to the Group entity.
func (au *AccountUpdate) AddGroups(g ...*Group) *AccountUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return au.AddGroupIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (au *AccountUpdate) Mutation() *AccountMutation {
	return au.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (au *AccountUpdate) ClearGroups() *AccountUpdate {
	au.mutation.ClearGroups()
	return au
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (au *AccountUpdate) RemoveGroupIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.RemoveGroupIDs(ids...)
	return au
}

// RemoveGroups removes "groups" edges to Group entities.
func (au *AccountUpdate) RemoveGroups(g ...*Group) *AccountUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return au.RemoveGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AccountUpdate) check() error {
	if v, ok := au.mutation.Name(); ok {
		if err := account.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Account.name": %w`, err)}
		}
	}
	if v, ok := au.mutation.Nickname(); ok {
		if err := account.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "Account.nickname": %w`, err)}
		}
	}
	if v, ok := au.mutation.Email(); ok {
		if err := account.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Account.email": %w`, err)}
		}
	}
	if v, ok := au.mutation.PhoneNumber(); ok {
		if err := account.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Account.phone_number": %w`, err)}
		}
	}
	if v, ok := au.mutation.PhotoURL(); ok {
		if err := account.PhotoURLValidator(v); err != nil {
			return &ValidationError{Name: "photo_url", err: fmt.Errorf(`ent: validator failed for field "Account.photo_url": %w`, err)}
		}
	}
	if v, ok := au.mutation.UID(); ok {
		if err := account.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`ent: validator failed for field "Account.uid": %w`, err)}
		}
	}
	if v, ok := au.mutation.AddressID(); ok {
		if err := account.AddressIDValidator(v); err != nil {
			return &ValidationError{Name: "address_id", err: fmt.Errorf(`ent: validator failed for field "Account.address_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.APIKey(); ok {
		if err := account.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`ent: validator failed for field "Account.api_key": %w`, err)}
		}
	}
	return nil
}

func (au *AccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(account.FieldName, field.TypeString, value)
	}
	if au.mutation.NameCleared() {
		_spec.ClearField(account.FieldName, field.TypeString)
	}
	if value, ok := au.mutation.Nickname(); ok {
		_spec.SetField(account.FieldNickname, field.TypeString, value)
	}
	if au.mutation.NicknameCleared() {
		_spec.ClearField(account.FieldNickname, field.TypeString)
	}
	if value, ok := au.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
	}
	if au.mutation.EmailCleared() {
		_spec.ClearField(account.FieldEmail, field.TypeString)
	}
	if value, ok := au.mutation.PhoneNumber(); ok {
		_spec.SetField(account.FieldPhoneNumber, field.TypeString, value)
	}
	if au.mutation.PhoneNumberCleared() {
		_spec.ClearField(account.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := au.mutation.PhotoURL(); ok {
		_spec.SetField(account.FieldPhotoURL, field.TypeString, value)
	}
	if au.mutation.PhotoURLCleared() {
		_spec.ClearField(account.FieldPhotoURL, field.TypeString)
	}
	if value, ok := au.mutation.UID(); ok {
		_spec.SetField(account.FieldUID, field.TypeString, value)
	}
	if value, ok := au.mutation.AddressID(); ok {
		_spec.SetField(account.FieldAddressID, field.TypeString, value)
	}
	if value, ok := au.mutation.APIKey(); ok {
		_spec.SetField(account.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := au.mutation.IsActive(); ok {
		_spec.SetField(account.FieldIsActive, field.TypeBool, value)
	}
	if au.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.GroupsTable,
			Columns: []string{account.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !au.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.GroupsTable,
			Columns: []string{account.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.GroupsTable,
			Columns: []string{account.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountMutation
}

// SetName sets the "name" field.
func (auo *AccountUpdateOne) SetName(s string) *AccountUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableName(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// ClearName clears the value of the "name" field.
func (auo *AccountUpdateOne) ClearName() *AccountUpdateOne {
	auo.mutation.ClearName()
	return auo
}

// SetNickname sets the "nickname" field.
func (auo *AccountUpdateOne) SetNickname(s string) *AccountUpdateOne {
	auo.mutation.SetNickname(s)
	return auo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableNickname(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetNickname(*s)
	}
	return auo
}

// ClearNickname clears the value of the "nickname" field.
func (auo *AccountUpdateOne) ClearNickname() *AccountUpdateOne {
	auo.mutation.ClearNickname()
	return auo
}

// SetEmail sets the "email" field.
func (auo *AccountUpdateOne) SetEmail(s string) *AccountUpdateOne {
	auo.mutation.SetEmail(s)
	return auo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableEmail(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetEmail(*s)
	}
	return auo
}

// ClearEmail clears the value of the "email" field.
func (auo *AccountUpdateOne) ClearEmail() *AccountUpdateOne {
	auo.mutation.ClearEmail()
	return auo
}

// SetPhoneNumber sets the "phone_number" field.
func (auo *AccountUpdateOne) SetPhoneNumber(s string) *AccountUpdateOne {
	auo.mutation.SetPhoneNumber(s)
	return auo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillablePhoneNumber(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetPhoneNumber(*s)
	}
	return auo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (auo *AccountUpdateOne) ClearPhoneNumber() *AccountUpdateOne {
	auo.mutation.ClearPhoneNumber()
	return auo
}

// SetPhotoURL sets the "photo_url" field.
func (auo *AccountUpdateOne) SetPhotoURL(s string) *AccountUpdateOne {
	auo.mutation.SetPhotoURL(s)
	return auo
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillablePhotoURL(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetPhotoURL(*s)
	}
	return auo
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (auo *AccountUpdateOne) ClearPhotoURL() *AccountUpdateOne {
	auo.mutation.ClearPhotoURL()
	return auo
}

// SetUID sets the "uid" field.
func (auo *AccountUpdateOne) SetUID(s string) *AccountUpdateOne {
	auo.mutation.SetUID(s)
	return auo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableUID(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetUID(*s)
	}
	return auo
}

// SetAddressID sets the "address_id" field.
func (auo *AccountUpdateOne) SetAddressID(s string) *AccountUpdateOne {
	auo.mutation.SetAddressID(s)
	return auo
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableAddressID(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetAddressID(*s)
	}
	return auo
}

// SetAPIKey sets the "api_key" field.
func (auo *AccountUpdateOne) SetAPIKey(s string) *AccountUpdateOne {
	auo.mutation.SetAPIKey(s)
	return auo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableAPIKey(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetAPIKey(*s)
	}
	return auo
}

// SetIsActive sets the "is_active" field.
func (auo *AccountUpdateOne) SetIsActive(b bool) *AccountUpdateOne {
	auo.mutation.SetIsActive(b)
	return auo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableIsActive(b *bool) *AccountUpdateOne {
	if b != nil {
		auo.SetIsActive(*b)
	}
	return auo
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (auo *AccountUpdateOne) AddGroupIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.AddGroupIDs(ids...)
	return auo
}

// AddGroups adds the "groups" edges to the Group entity.
func (auo *AccountUpdateOne) AddGroups(g ...*Group) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return auo.AddGroupIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (auo *AccountUpdateOne) Mutation() *AccountMutation {
	return auo.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (auo *AccountUpdateOne) ClearGroups() *AccountUpdateOne {
	auo.mutation.ClearGroups()
	return auo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (auo *AccountUpdateOne) RemoveGroupIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.RemoveGroupIDs(ids...)
	return auo
}

// RemoveGroups removes "groups" edges to Group entities.
func (auo *AccountUpdateOne) RemoveGroups(g ...*Group) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return auo.RemoveGroupIDs(ids...)
}

// Where appends a list predicates to the AccountUpdate builder.
func (auo *AccountUpdateOne) Where(ps ...predicate.Account) *AccountUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AccountUpdateOne) Select(field string, fields ...string) *AccountUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Account entity.
func (auo *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AccountUpdateOne) check() error {
	if v, ok := auo.mutation.Name(); ok {
		if err := account.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Account.name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Nickname(); ok {
		if err := account.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "Account.nickname": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Email(); ok {
		if err := account.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Account.email": %w`, err)}
		}
	}
	if v, ok := auo.mutation.PhoneNumber(); ok {
		if err := account.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Account.phone_number": %w`, err)}
		}
	}
	if v, ok := auo.mutation.PhotoURL(); ok {
		if err := account.PhotoURLValidator(v); err != nil {
			return &ValidationError{Name: "photo_url", err: fmt.Errorf(`ent: validator failed for field "Account.photo_url": %w`, err)}
		}
	}
	if v, ok := auo.mutation.UID(); ok {
		if err := account.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`ent: validator failed for field "Account.uid": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AddressID(); ok {
		if err := account.AddressIDValidator(v); err != nil {
			return &ValidationError{Name: "address_id", err: fmt.Errorf(`ent: validator failed for field "Account.address_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.APIKey(); ok {
		if err := account.APIKeyValidator(v); err != nil {
			return &ValidationError{Name: "api_key", err: fmt.Errorf(`ent: validator failed for field "Account.api_key": %w`, err)}
		}
	}
	return nil
}

func (auo *AccountUpdateOne) sqlSave(ctx context.Context) (_node *Account, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Account.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, account.FieldID)
		for _, f := range fields {
			if !account.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != account.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(account.FieldName, field.TypeString, value)
	}
	if auo.mutation.NameCleared() {
		_spec.ClearField(account.FieldName, field.TypeString)
	}
	if value, ok := auo.mutation.Nickname(); ok {
		_spec.SetField(account.FieldNickname, field.TypeString, value)
	}
	if auo.mutation.NicknameCleared() {
		_spec.ClearField(account.FieldNickname, field.TypeString)
	}
	if value, ok := auo.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
	}
	if auo.mutation.EmailCleared() {
		_spec.ClearField(account.FieldEmail, field.TypeString)
	}
	if value, ok := auo.mutation.PhoneNumber(); ok {
		_spec.SetField(account.FieldPhoneNumber, field.TypeString, value)
	}
	if auo.mutation.PhoneNumberCleared() {
		_spec.ClearField(account.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := auo.mutation.PhotoURL(); ok {
		_spec.SetField(account.FieldPhotoURL, field.TypeString, value)
	}
	if auo.mutation.PhotoURLCleared() {
		_spec.ClearField(account.FieldPhotoURL, field.TypeString)
	}
	if value, ok := auo.mutation.UID(); ok {
		_spec.SetField(account.FieldUID, field.TypeString, value)
	}
	if value, ok := auo.mutation.AddressID(); ok {
		_spec.SetField(account.FieldAddressID, field.TypeString, value)
	}
	if value, ok := auo.mutation.APIKey(); ok {
		_spec.SetField(account.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := auo.mutation.IsActive(); ok {
		_spec.SetField(account.FieldIsActive, field.TypeBool, value)
	}
	if auo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.GroupsTable,
			Columns: []string{account.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !auo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.GroupsTable,
			Columns: []string{account.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.GroupsTable,
			Columns: []string{account.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Account{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
